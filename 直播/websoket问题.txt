问题一：WebSocket连接后一分钟自动断开关闭

这是因为websocket长连接有默认的超时时间（1分钟，由proxy_read_timeout决定），就是超过一定的时间没有发送任何消息，连接会自动断开。解决办法就是让浏览器每隔一定时间（要小于超时时间）发送一个心跳。代码如下：

window.setInterval(function(){ //每隔5秒钟发送一次心跳，避免websocket连接因超时而自动断开
var ping = {"type":"ping"};
ws.send(JSON.stringify(ping));
},5000);


问题二：聊天内容超出聊天框高度时，滚动条不能自动滑动到底部

解决办法：

假定聊天框是

<div id="scrollDiv" style="overflow:auto; height: 400px; width: 600px;"></div>

添加一条消息

var scrollDiv = document.getElementById('scrollDiv');
scrollDiv.innerHTML += '增加一条聊天消息<br />';
scrollDiv.scrollTop = scrollDiv.scrollHeight; //关键是这个



给websocket加入心跳包防止自动断开连接


var userId=$("#userId").val();
var lockReconnect = false;  //避免ws重复连接
var ws = null;          // 判断当前浏览器是否支持WebSocket
var wsUrl = serverConfig.cyberhouse_ws+userId;
createWebSocket(wsUrl);   //连接ws

function createWebSocket(url) {
    try{
        if('WebSocket' in window){
            ws = new WebSocket(url);
        }else if('MozWebSocket' in window){  
            ws = new MozWebSocket(url);
        }else{
            layui.use(['layer'],function(){
              var layer = layui.layer;
              layer.alert("您的浏览器不支持websocket协议,建议使用新版谷歌、火狐等浏览器，请勿使用IE10以下浏览器，360浏览器请使用极速模式，不要使用兼容模式！"); 
            });
        }
        initEventHandle();
    }catch(e){
        reconnect(url);
        console.log(e);
    }     
}

function initEventHandle() {
    ws.onclose = function () {
        reconnect(wsUrl);
        console.log("llws连接关闭!"+new Date().toUTCString());
    };
    ws.onerror = function () {
        reconnect(wsUrl);
        console.log("llws连接错误!");
    };
    ws.onopen = function () {
        heartCheck.reset().start();      //心跳检测重置
        console.log("llws连接成功!"+new Date().toUTCString());
    };
    ws.onmessage = function (event) {    //如果获取到消息，心跳检测重置
        heartCheck.reset().start();      //拿到任何消息都说明当前连接是正常的
        console.log("llws收到消息啦:" +event.data);
        if(event.data!='pong'){
            var obj=eval("("+event.data+")");
            layui.use(['layim'], function(layim){
                if(obj.type=="onlineStatus"){
                    layim.setFriendStatus(obj.id, obj.content);
                }else if(obj.type=="friend" || obj.type=="group"){
                    layim.getMessage(obj);  
                } 
    };
}
// 监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
window.onbeforeunload = function() {
    ws.close();
}  

function reconnect(url) {
    if(lockReconnect) return;
    lockReconnect = true;
    setTimeout(function () {     //没连接上会一直重连，设置延迟避免请求过多
        createWebSocket(url);
        lockReconnect = false;
    }, 2000);
}

//心跳检测
var heartCheck = {
    timeout: 540000,        //9分钟发一次心跳
    timeoutObj: null,
    serverTimeoutObj: null,
    reset: function(){
        clearTimeout(this.timeoutObj);
        clearTimeout(this.serverTimeoutObj);
        return this;
    },
    start: function(){
        var self = this;
        this.timeoutObj = setTimeout(function(){
            //这里发送一个心跳，后端收到后，返回一个心跳消息，
            //onmessage拿到返回的心跳就说明连接正常
            ws.send("ping");
            console.log("ping!")
            self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了
                ws.close();     //如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次
            }, self.timeout)
        }, this.timeout)
    }
}



 // 收到客户端消息后调用的方法 
    @OnMessage  
    public void onMessage(String message, Session session) {  
        if(message.equals("ping")){
        }else{
        。。。。
        }
   }
   

系统发现websocket每隔10分钟自动断开连接，搜了很多博客都说设置一下nginx的
keepalive_timeout
proxy_connect_timeout
proxy_send_timeout
proxy_read_timeout
这四个字段的时长即可，然而好像并不奏效。遂采取心跳包的方式每隔9分钟客户端自动发送ping消息给服务端，服务端不需要返回。即可解决问题。




本文主要讲的是如果设计websocket心跳已经需要考虑哪些问题。
前言

在使用websocket的过程中，有时候会遇到客户端网络关闭的情况，而这时候在服务端并没有触发onclose事件。这样会：

    多余的连接
    服务端会继续给客户端发数据，这些数据会丢失

所以就需要一种机制来检测客户端和服务端是否处于正常连接的状态。这就是websocket心跳，这个名字非常生动形象，还有心跳说明还活着（保持正常连接），没有心跳说明已经挂掉了（连接断开了）。
要解决的问题

我的代码主要解决了以下几个问题。

    连接上之后，每秒发送一个心跳，服务器同样返回一个心跳，用来表示服务器没挂。
    断线重连（我们测试的环境是断开网络连接），断开网络后，心跳包无法发送出去，所以如果当前时间距离上次成功心跳的时间超过20秒，说明连接已经出现问题了，此时需要关闭连接。
    第一次关闭连接时websocket会尝试重连，设置了一个时间期限，10秒。10秒内如果能连上（恢复网络连接）就可以继续收发消息，连不上就关闭了，并且不会重连。
    30秒内收不到服务器消息（心跳每秒发送），我就认为服务器已经挂了，就会调用close事件，然后进入第3步。

需要什么

开始考虑得不周到，命名不规范。

    一个定时器ws.keepAliveTimer，用来每秒发送一次心跳。
    上次心跳成功的时间ws.last_health_time以及当前时间let time = new Date().getTime();。
    断开连接(ws.close())时的时间reconnect，因为在close事件发生后需要重连10秒。
    是否已经重连过reconnectMark。
    断开连接(ws.close())时需要保存ws对象tempWs。我曾试图ws = { ...ws }发现会丢失绑定的事件。
    一个定时时间为30秒的setTimeout定时器ws.receiveMessageTimer，用来表示服务器是否在30秒内返回了消息。

代码部分

我是在react中使用websocket心跳的。当用户登录时我会建立websocket连接。由于使用了redux，所以该部分代码放在componentWillReceiveProps中。

componentWillReceiveProps(nextProps) {
  if(nextProps.isLogin && !this.state.notificationSocket) { // 用户登录了并且没有连接过websocket
    let ws = new WebSocket(`${chatUrl}/${nextProps.userId}`);
    ws.last_health_time = -1; // 上一次心跳时间
    ws.keepalive = function() { 
      let time = new Date().getTime();
      if(ws.last_health_time !== -1 && time - ws.last_health_time > 20000) { // 不是刚开始连接并且20s
        ws.close()
      } else { 
        // 如果断网了，ws.send会无法发送消息出去。ws.bufferedAmount不会为0。
        if(ws.bufferedAmount === 0 && ws.readyState === 1) { 
          ws.send('h&b');
          ws.last_health_time = time;
        }
      }
    }
    if(ws) {
      let reconnect = 0; //重连的时间
      let reconnectMark = false; //是否重连过
      this.setState({
        notificationSocket: true
      })
      ws.onopen = () => {
        reconnect = 0;
        reconnectMark = false;
        ws.receiveMessageTimer = setTimeout(() => {
          ws.close();
        }, 30000); // 30s没收到信息，代表服务器出问题了，关闭连接。如果收到消息了，重置该定时器。
        if(ws.readyState === 1) { // 为1表示连接处于open状态
          ws.keepAliveTimer = setInterval(() => {
            ws.keepalive();
          }, 1000)
        }

      }
      ws.onerror = () => {
        console.error('onerror')
      }
      ws.onmessage = (msg) => {
      /* 这一注释部分是我的业务逻辑代码，大家可以忽略
        msg = JSON.parse(msg.data);
        let chatObj = JSON.parse(localStorage.getItem(CHATOBJECT)) || {};
        if(msg && msg.senderUserId && !chatObj[msg.senderUserId]) chatObj[msg.senderUserId] = [];
        if(msg.content !== 'h&b') {
          if(msg.chat === true) { // 聊天
            // chatObj[msg.senderUserId] = [<p key={new Date().getTime()}>{msg.content}</p>, ...chatObj[msg.senderUserId]]
            chatObj[msg.senderUserId].unshift(msg.content);
            WindowNotificationUtils.notice(msg.title, msg.content, () => {
              const { history } = this.props;
              history.replace({
                pathname: '/sendNotice',
                search: `?senderUserId=${msg.senderUserId}` // 为什么放在url，因为刷新页面数据不会掉
              });
            })
            localStorage.setItem(CHATOBJECT, JSON.stringify(chatObj));
            this.props.dispatch({
              type: UPDATE_CHAT
            })
          } else { // 通知
            WindowNotificationUtils.notice(msg.title, msg.content);
          }
        }
      */
        // 收到消息，重置定时器
        clearTimeout(ws.receiveMessageTimer); 
        ws.receiveMessageTimer = setTimeout(() => {
          ws.close();
        }, 30000); // 30s没收到信息，代表服务器出问题了，关闭连接。
      }
      ws.onclose = () => {
        clearTimeout(ws.receiveMessageTimer);
        clearInterval(ws.keepAliveTimer);
        if(!reconnectMark) { // 如果没有重连过，进行重连。
          reconnect = new Date().getTime();
          reconnectMark = true;
        }
        let tempWs = ws; // 保存ws对象
        if(new Date().getTime() - reconnect >= 10000) { // 10秒中重连，连不上就不连了
          ws.close();
        } else {
          ws = new WebSocket(`${chatUrl}/${nextProps.userId}`);
          ws.onopen = tempWs.onopen;
          ws.onmessage = tempWs.onmessage;
          ws.onerror = tempWs.onerror;
          ws.onclose = tempWs.onclose;
          ws.keepalive = tempWs.keepalive;
          ws.last_health_time = -1;
        }
      }
    }
  }
}

   
以上就是websocket心跳的全部实现。看到断开网络后然后再脸上网络websocket又连上了，那一刻心里很喜悦。如果有什么问题，欢迎大家和我交流。